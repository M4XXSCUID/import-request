
Comments
 The folowing syntax is used to create a comment. (A comment is a note programmers
 makeabouttheintention behind their code.)
 #
 Starts a line that contains a Python comment
 # Print approved usernames
 Contains a commentthat indicates the purpose of the code that folows it is to
 print approved usernames
 """ (documentationstrings)
 Starts and ends a multi-line string that is o en used as a Python comment; multi-line
 commentsareusedwhenyouneedmorethan79charactersinasingle comment
 """
 The estimate_attempts() function takes in a monthly
 login attempt total and a number of months and
 returns their product.
 """
 Contains a multi-line comment that indicates the purpose of the
 estimate_attempts()function
 Conditional statements
 The folowing keywords and operators are used in conditional statements.
 if
 Starts a conditional statement
 if device_id != "la858zn":
 Starts a conditional statement that evaluates whether the device_id variable
 contains a value that is not equal to "la858zn"
if user in approved_list:
 Starts a conditional statement that evaluates if the user variable contains a
 value that is also found in the approved_list variable
 elif
 Precedes a condition that is only evaluated when previous conditions evaluate to
 False; previous conditions include the condition in the if statement, and when
 applicable, conditions in other elif statements
 elif status == 500:
 Whenprevious conditions evaluate to False, evaluates if the status variable
 contains a value that is equal to 500
 else
 Precedes a code section that only evaluates when al conditions that precede it within
 the conditional statement evaluate to False; this includes the condition in the if
 statement, and when applicable, conditions in elif statements
 else:
 Whenprevious conditions evaluate to False, Python evaluates this else
 statement
 and
 Requires both conditions on either side of the operator to evaluate to True
 if username == "bmoreno" and login_attempts < 5:
 Evaluates to True if the value in the username variable is equal to "bmoreno"
 and the value in the login_attempts variable is less than 5
 or
 Requires only one of the conditions on either side of the operator to evaluate to True
 if status == 100 or status == 102:
 Evaluates to True if the value in the status variable is equal to 100 or the value
 in the statusvariable is equal to 102
not
 Negates a given condition so that it evaluates to False if the condition is True and to
 Trueif it is False
 if not account_status == "removed"
 Evaluates to False if the value in the account_status variable is equal to
 "removed"andevaluates to True if the value is the account_status variable
 is not equal to "removed"
 Iterative statements
 The folowing keywords are used in iterative statements.
 for
 Signals the beginning of a for loop; used to iterate through a speci ed sequence
 for username in ["bmoreno", "tshah", "elarson"]:
 Signals the beginning of a for loop that iterates through the sequence of
 elements in the list ["bmoreno", "tshah", "elarson"]usingtheloop
 variable username
 for i in range(10):
 Signals the beginning of a for loop that iterates through a sequence of
 numbers created by range(10)using the loop variable i
 while
 Signals the beginning of a while loop; used to iterate based on a condition
 while login_attempts < 5:
 Signals the beginning of a while loop that wil iterate as long as the condition
 that the value of login_attempts is less than 5 evaluates to True
 break
 Used to break out of aloop
continue
 Used to skip a loop iteration and continue with the next one
 User-de nedfunctions
 The folowing keywords are used when creating user-de ned functions.
 def
 Placed before a function name to de neafunction
 def greet_employee():
 De nesthegreet_employee()function
 def calculate_fails(total_attempts, failed_attempts):
 De nesthecalculate_fails()function,whichincludes the two parameters
 of total_attemptsandfailed_attempts
 return
 Used to return information from a function; when Python encounters this keyword, it
 exits the function a er returning the information
 def calculate_fails(total_attempts, failed_attempts):
 fail_percentage = failed_attempts / total_attempts
 return fail_percentage
 Returns the value of the fail_percentage variable from the
 calculate_fails()function
 Built-in functions
 The folowing built-in functions are commonly used in Python.
 print()
 Outputs a speci edobject to the screen
 print("login success")
 Outputs the string "login success"tothescreen
print(9 < 7)
 Outputs the Boolean value of False to the screen a erevaluating whether the
 integer 9 is less than the integer 7
 type()
 Returns the data type of its input
 print(type(51.1))
 Returns the data type of oat for the input of 51.1
 print(type(True))
 Returns the data type of Boolean for the input of True
 range()
 Generates a sequence of numbers
 range(0, 5, 1)
 Generates a sequence with a start point of 0, a stop point of 5, and an
 increment of 1; because the start point is inclusive but the stop point is
 exclusive, the generated sequence is 0, 1, 2, 3, and 4
 range(5)
 Generates a sequence with a stop point of 5; when the start point is not
 speci ed, it is set at the default value of 0, and when the increment is not
 speci ed, it is set at the default value of 1; the generated sequence is 0, 1, 2, 3,
 and 4
 max()
 Returns the largest numeric input passed into it
 print(max(10, 15, 5))
 Returns 15 and outputs this value to the screen
min()
 Returns the smalest numeric input passed into it
 print(min(10, 15, 5))
 Returns 5 and outputs this value to the screen
 sorted()
 Sorts the components of a list (or other iterable)
 print(sorted([10, 15, 5]))
 Sorts the elements of the list from smalest to largest and outputs the sorted list
 of [5, 10, 15]tothescreen
 print(sorted(["bmoreno", "tshah", "elarson"]))
 Sorts the elements in the list in alphabetical order and outputs the sorted list of
 ["bmoreno", "elarson", "tshah"]tothescreen
 str()
 Converts the input object to a string
 str(10)
 Converts the integer 10 to the string "10"
 len()
 Returns the number of elements in an object
 print(len("security"))
 Returns and displays 8, the number of characters in the string "security"
Importing modules and libraries
 The folowing keyword is used to import a module from the Python Standard Library or
 to import an external library that has already been insta led.
 import
 Searches for a module or library in a system and adds it to the local Python
 environment
 import statistics
 Imports the statistics moduleandalofits functions from the Python
 Standard Library
 from statistics import mean
 Imports the mean() function of the statistics module from the Python
 Standard Library
 from statistics import mean, median
 Imports the mean() andmedian()functions of the statistics modulefrom
 the Python Standard Library
 String methods
 The folowing methods can beapplied to strings in Python.
 .upper()
 Returns a copy of the string in al uppercase le ers
 print("Security".upper())
 Returns and displays a copy of the string "Security" as "SECURITY"
 .lower()
 Returns a copy of the string in al lowercase le ers
 print("Security".lower())
 Returns and displays a copy of the string "Security" as "security"
.index()
 Finds the rst occurrence of the input in a string and returns its location
 print("Security".index("c"))
 Finds the rst occurrence of the character "c" in the string "Security" and
 returns and displays its index of 2
 List methods
 The folowing methods can beapplied to lists in Python.
 .insert()
 Addsanelementin aspeci cposition inside the list
 username_list = ["elarson", "fgarcia", "tshah"]
 username_list.insert(2,"wjaffrey")
 Addsthe element "wjaffrey"atindex 2totheusername_list;thelist
 becomes["elarson", "fgarcia", "wjaffrey", "tshah"]
 .remove()
 Removesthe rstoccurrence of aspeci celementinside a list
 username_list = ["elarson", "bmoreno", "wjaffrey", "tshah"]
 username_list.remove("elarson")
 Removestheelement "elarson"fromtheusername_list;thelist becomes
 ["fgarcia", "wjaffrey", "tshah"]
 .append()
 Addsinput to the end of alist
 username_list = ["bmoreno", "wjaffrey", "tshah"]
 username_list.append("btang")
 Addsthe element "btang"totheendoftheusername_list;thelist
 becomes["fgarcia", "wjaffrey", "tshah", "btang"]
.index()
 Finds the rst occurrence of an element in a list and returns its index
 username_list = ["bmoreno", "wjaffrey", "tshah", "btang"]
 print(username_list.index("tshah"))
 Finds the rst occurrence of the element "tshah" in the username_list and
 returns and displays its index of 2
 Additional syntax for working with strings and lists
 The folowing syntax is useful when working with strings and lists.
 + (concatenation)
 Combines twostrings or lists together
 device_id = "IT"+"nwp12"
 Combines the string "IT" with the string "nwp12" and assigns the combined
 string of "ITnwp12" to the variable device_id
 users = ["elarson", "bmoreno"] + ["tshah", "btang"]
 Combines the list ["elarson", "bmoreno"]withthelist ["tshah",
 "btang"]andassigns the combined list of ["elarson", "bmoreno",
 "tshah", "btang"]tothevariableusers
 [] (bracketnotation)
 Uses indices to extract parts of a string or list
 print("h32rb17"[0])
 Extracts the character at index 0, which is ("h"), from the string "h32rb17"
 print("h32rb17"[0:3])
 Extracts the slice [0:3], which is ("h32"), from the string "h32rb17"; the rst
 index in the slice (0) is included in the slice but the second index in the slice (3)
 is excluded
username_list = ["elarson", "fgarcia", "tshah"]
 print(username_list[2])
 Extracts the element at index 2, which is ("tshah"), from the username_list
 Regular expressions
 The folowing re modulefunction and regular expression symbols are useful when
 searching for pa erns in strings.
 re.findall()
 Returns a list of matches to a regular expression
 import re
 re.findall("a53", "a53-32c .E")
 Returns a list of matches to the regular expression pa ern "a53" in the string
 "a53-32c .E";returns the list ["a53"]
 \w
 Matches with any alphanumeric character; also matches with the underscore (_)
 import re
 re.findall("\w", "a53-32c .E")
 Returns a list of matches to the regular expression pa ern "\w" in the string
 "a53-32c .E";matchestoanyalphanumericcharacter and returns the list
 ["a", "5", "3", "3", "2", "c", "E"]
 .
 Matches to al characters, including symbols
 import re
 re.findall(".", "a53-32c .E")
 Returns a list of matches to the regular expression pa ern "." in the string
 "a53-32c .E";matchestoalcharacters and returns the list ["a", "5",
 "3", "-", "3", "2", "c", " ", ".", "E"]
\d
 Matches to al single digits
 import re
 re.findall("\d", "a53-32c .E")
 Returns a list of matches to the regular expression pa ern "\d" in the string
 "a53-32c .E";matchestoalsingle digits and returns the list ["5", "3",
 "3", "2"]
 \s
 Matches to al single spaces
 import re
 re.findall("\s", "a53-32c .E")
 Returns a list of matches to the regular expression pa ern "\s" in the string
 "a53-32c .E";matchestoalsingle spaces andreturns the list [" "]
 \.
 Matches to the period character
 import re
 re.findall("\.", "a53-32c .E")
 Returns a list of matches to the regular expression pa ern "\." in the string
 "a53-32c .E";matchestoal instances of the period character and returns
 the list ["."]
 +
 Represents one or more occurrences of a speci c character
 import re
 re.findall("\w+", "a53-32c .E")
 Returns a list of matches to the regular expression pa ern "\w+" in the string
 "a53-32c .E";matchestooneormoreoccurrencesofanyalphanumeric
 character and returns the list ["a53", "32c", "E"]
*
 Represents, zero, one or more occurrences of a speci c character
 import re
 re.findall("\w*", "a53-32c .E")
 Returns a list of matches to the regular expression pa ern "\w*" in the string
 "a53-32c .E";matchestozero,oneormoreoccurrencesofany
 alphanumeric character and returns the list ["a53", " ", "32c", " ", "
 ", "E"]
 { }
 Represents a speci ed numberofoccurrences of a speci ccharacter; the number is
 speci edwithin the curly brackets
 import re
 re.findall("\w{3}", "a53-32c .E")
 Returns a list of matches to the regular expression pa ern "\w{3}" in the string
 "a53-32c .E";matchestoexactly three occurrences of any alphanumeric
 character and returns the list ["a53","32c"]
 File operations
 The folowing functions, methods, and keywords are used with operations involving
 les.
 with
 Handles errors and manages external resources
 with open("logs.txt", "r") as file:
 Used to handle errors and manage external resources while opening a le; the
 variable file stores the le information while inside of the with statement;
 managesresources by closing the le a erexiting the with statement
 open()
 Opensa leinPython
 with open("login_attempts.txt", "r") as file:
Opensthe le"login_attempts.txt"inordertoreadit("r")
 with open("update_log.txt", "w") as file:
 Opensthe le"update_log.txt"intothevariable filein order to write over
 its contents ("w")
 with open(import_file, "a") as file:
 Opensthe leassignedtotheimport_filevariable into the variable file in
 order to append information to the end of it ("a")
 as
 Assigns a variable that references another object
 with open("logs.txt", "r") as file:
 Assigns the file variable to reference the output of the open() function
 .read()
 Converts les into strings; returns the content of an open le as a string by default
 with open("login_attempts.txt", "r") as file:
 file_text = file.read()
 Converts the le object referenced in the file variable into a string and then
 stores this string in the file_text variable
 .write()
 Writes string data to a speci ed le
 with open("access_log.txt", "a") as file:
 file.write("jrafael")
 Writes the string "jrafael" to the "access_log.txt" le; because the second
 argument in the cal to the open() function is "a", this string is appended to
 the end ofthe le
Parsing
 The folowing methods are useful when parsing data.
 .split()
 Converts a string into a list; separates the string based on the character that is passed
 in as an argument; if an argument is not passed in, it wil separate the string each time
 it encounters whitespace characters such as a space or return
 approved_users = "elarson,bmoreno,tshah".split(",")
 Converts the string "elarson,bmoreno,tshah" into the list
 ["elarson","bmoreno","tshah"]byspli ingthestring into a separate list
 element at each occurrence of the "," character
 removed_users = "wjaffrey jsoto abernard".split()
 Converts the string "wjaffrey jsoto abernard"intothelist
 ["wjaffrey","jsoto","abernard"]byspli ingthestring into a separate
 list element at each space
 .join()
 Concatenates the elements of an iterable into a string; takes the iterable to be
 concatenated as an argument; is appended to a character that wil separate each
 element once they are joined into a string
 approved_users = ",".join(["elarson", "bmoreno", "tshah"])
 Concatenates the elements of the list ["elarson","bmoreno","tshah"]
 into the string "elarson,bmoreno,tshah" , separating each element with
 the ","character within the string
